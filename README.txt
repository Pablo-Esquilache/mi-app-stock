
# Gu√≠a de Actualizaci√≥n y Deploy para la App de Stock (PWA)

Esta gu√≠a explica c√≥mo manejar las actualizaciones, el deploy en GitHub y la estrategia de versiones para que tu aplicaci√≥n se actualice correctamente en los dispositivos de los usuarios.

---

## üß± Estructura general del proyecto

- `/public/`: Contiene archivos visibles por el navegador (HTML, CSS, JS).
- `/public/sw.js`: Archivo del Service Worker.
- `/public/js/dashboard.js`: Script del Dashboard, donde se muestra la alerta de actualizaci√≥n.

---

## üöÄ ¬øC√≥mo se actualiza la aplicaci√≥n PWA?

Tu app usa un **Service Worker** para funcionar offline y comportarse como PWA. Cuando detecta una nueva versi√≥n cacheada, muestra un cartel en el Dashboard para actualizar.

### Qu√© se detecta como "nueva versi√≥n":

- Cambios en archivos JS, CSS, HTML o im√°genes que est√°n cacheados por el SW.
- Cambios en la l√≥gica del Service Worker (`sw.js`).
- Cambios en el nombre del cach√© (por ejemplo: 'stock-app-v1' ‚Üí 'stock-app-v2').

---

## üß† Flujo de actualizaci√≥n autom√°tica

1. El Service Worker se registra en `dashboard.js`.
2. Si detecta un nuevo SW con archivos modificados:
   - Muestra un `confirm()` al usuario.
   - Si acepta, se llama a `skipWaiting()` y la p√°gina se recarga.

---

## üõ†Ô∏è ¬øQu√© ten√©s que hacer para subir una nueva versi√≥n?

### Paso a paso:

1. **Modific√° los archivos que quieras actualizar**:
   - Ejemplo: `dashboard.js`, `styles.css`, etc.

2. **Modific√° el archivo `/public/sw.js`**:
   - Cambi√° el nombre de la cach√©:
     ```js
     const CACHE_NAME = 'stock-app-v4';  // ¬°Cambi√° esto en cada versi√≥n!
     ```

3. **Hac√© commit y push a GitHub**:
   ```bash
   git add .
   git commit -m "Versi√≥n nueva: stock-app-v4"
   git push origin main
   ```

4. **Deploy en Firebase Hosting o tu servicio**:
   - Si us√°s Firebase:
     ```bash
     firebase deploy
     ```

5. ‚úÖ ¬°Listo! Los usuarios ver√°n la alerta de actualizaci√≥n en el Dashboard.

---

## üí° Consejos √∫tiles

- Si us√°s herramientas de build (Webpack, Vite, etc.), habilit√° el versionado autom√°tico de archivos.
- Manten√© tu `sw.js` lo m√°s liviano posible.
- Pod√©s agregar un mensaje visual m√°s lindo en lugar del `confirm()` si quer√©s una mejor experiencia.

---

## üìÇ Archivos importantes

- `public/sw.js`: Controla el cach√© y detecta actualizaciones.
- `public/js/dashboard.js`: Muestra la alerta de actualizaci√≥n.
- `index.html`: Entrada principal de la app.

---

Cualquier duda o mejora, actualiz√° esta gu√≠a para mantenerla como referencia del proyecto.
